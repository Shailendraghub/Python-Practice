{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b36ee5ed-ac69-413e-9a80-ec0a010aa9e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a no: 15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "not satify condition\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"enter a no:\"))\n",
    "if(num>10 and num):\n",
    "    print(\"number is grater than 10\")\n",
    "\n",
    "else:\n",
    "    print(\"not satify condition\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6f87fc3-ed88-4e61-8708-2b583d31c611",
   "metadata": {},
   "outputs": [],
   "source": [
    "#kisi person ki age >10 --child\n",
    "# 25>  adult\n",
    "# 40> citiozon\n",
    "# 60 >senior citioz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "592e5ffa-d443-46ed-8835-fd7693198977",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 7) (1223890519.py, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[53], line 7\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(\"citize)\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 7)\n"
     ]
    }
   ],
   "source": [
    "age =int(input(\"enter age\"))\n",
    "if age>10 and age<24:\n",
    "    print(\"child \")\n",
    "elif age>25 and age<39:\n",
    "    print(\"adult\")\n",
    "elif age>39 and age<60:\n",
    "    print(\"citize)\n",
    "else:\n",
    "    print(\"senior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ac6d5cc-d646-40e7-960a-8ee52ea1f0a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# take three age of person and find out the oldest age "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f43bc9b8-3d3e-4632-9f0b-f0643324942c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter age 10\n",
      "enter age 40\n",
      "enter age 60\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 is oldest\n"
     ]
    }
   ],
   "source": [
    "age1 =int(input(\"enter age\"))\n",
    "age2 =int(input(\"enter age\"))\n",
    "age3 =int(input(\"enter age\"))\n",
    "if(age1>age1 and age1>age3):\n",
    "    print(age,\"is oldest\")\n",
    "if(age2>age1 and age2>age3):\n",
    "    print(age1,\"is oldest\")\n",
    "else:\n",
    "    print(age3,\"is oldest\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8e53d315-4133-4819-8c2d-f4d5df994e69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter age 60\n",
      "enter age 90\n",
      "enter age 30\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tringle\n"
     ]
    }
   ],
   "source": [
    "a =int(input(\"enter age\"))\n",
    "b =int(input(\"enter age\"))\n",
    "c =int(input(\"enter age\"))\n",
    "if a+b+c==180 and a>0 and b>0 and c>0:\n",
    "    print(\"tringle\")\n",
    "else:\n",
    "    print(\"not\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "151ddc1d-464c-4d70-9ee5-335a396806f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#you have an yera as string and that is leap year or not\n",
    "# 4%\n",
    "100 se na ho\n",
    "400 se ho divide "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "bf22e849-507a-4c67-b201-57746546541e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "not\n"
     ]
    }
   ],
   "source": [
    "# check year is leap year or not??\n",
    "num= \"1900\"\n",
    "num1=int(num)\n",
    "if num1%4==0 and num1%100!=0 or num1%400==0:\n",
    "    print(\"leap year\")\n",
    "else:\n",
    "    print(\"not\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c5187a9-570f-4101-9541-af565a07fe9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate amount spend kiya jayega based                                                                                                                                      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "8f89edb4-893b-4973-99ee-b045929cac40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70\n"
     ]
    }
   ],
   "source": [
    "unit=60\n",
    "if(unit<=50):\n",
    "    amount=unit*1\n",
    "elif(unit<=150):\n",
    "    amount=50+(unit-50)*2\n",
    "elif(unit<=250):\n",
    "    amount=250+(unit-150)*10\n",
    "else:\n",
    "    amount=(unit-1250+unit+250)*15\n",
    "print(amount)\n",
    "\n",
    "\n",
    "\n",
    "# 50 =>50\n",
    "# 150 => 50 +100*2\n",
    "# 151 to 250  =>  250+100*10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "99e12c26-346a-48c4-a534-d37d7211286d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter value 10\n",
      "enter value 20\n",
      "enter value 20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal tringle\n"
     ]
    }
   ],
   "source": [
    "a =int(input(\"enter value\"))\n",
    "b =int(input(\"enter value\"))\n",
    "c =int(input(\"enter value\"))\n",
    "if a==b or b==c or c==a:\n",
    "    print(\"equal tringle\")\n",
    "elif a!=b and a!=c:\n",
    "    print(\"scalen tringle\")\n",
    "else:\n",
    "    print(\"isolscelen tringle\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aaf7635d-2a49-410d-bcde-9baf680dca66",
   "metadata": {},
   "outputs": [],
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
